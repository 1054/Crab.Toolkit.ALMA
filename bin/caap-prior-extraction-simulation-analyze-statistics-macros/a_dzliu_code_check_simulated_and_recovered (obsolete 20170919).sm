go
    # 
    # Usage:
    #   echo "macro read a_dzliu_code_check_simulated_and_recovered.sm go" | sm
    # 
    load rfile.sm
    
    if(!is_file("datatable_Simulated.txt")) {
        print 'Error! \"datatable_Simulated.txt\" was not found under current directory!\n' {}
        return
    }
    rfile "datatable_Simulated.txt"
    foreach var {id ra dec z lgMstar lgSFR Maj Min PA Maj_pix Min_pix flux} {
        if(!is_vector($var)) {print 'Error! Vector $var is invalid!\n' {} exit}
        set sim_$var = $var
    }
    
    if(!is_file("datatable_Recovered_galfit.txt")) {
        print 'Error! \"datatable_Recovered_galfit.txt\" was not found under current directory!\n' {}
        return
    }
    rfile "datatable_Recovered_galfit.txt"
    set fit_coo = (snr_total>2.0 && pb_corr<16.0) # goes as far as about 2xFWHM, 1/exp(-((2.0*2.35482/2.0))**2/2.0) = 16
    foreach var {id ra dec Maj Min PA Maj_err Min_err PA_err} {
        if(!is_vector($var)) {print 'Error! Vector $var is invalid!\n' {} exit}
        set fit_$var = $var if(fit_coo)
    }
    foreach var {f_total df_total snr_total f_peak df_peak snr_peak pb_corr fpeak fres rms} {
        if(!is_vector($var)) {print 'Error! Vector $var is invalid!\n' {} exit}
        set $var = $var if(fit_coo)
        # fpeak is the source model image measured peak pixel value * 1e3 -> mJy
        # fres is the source residual image measured 1.0 arcsec diameter aperture sum of absolute pixel values
    }
    
    # get rms
    stats rms rms_mean rms_sigma rms_kurt
    stats_med rms rms_median rms_siqr
    
    # get beam
    data "info_synthesized_beam.txt" read row synthesized_beam_size 1.f
    data "info_primary_beam.txt" read row primary_beam_size 1.f
    #set synthesized_beam_size = sqrt(0.300786) / (pi/(4*ln(2))) #<TEST>#
    #set primary_beam_size = 17.0298 #<TEST>#
    if(dimen(primary_beam_size)>=2) {
        set primary_beam_area = pi /(4*ln(2)) * (primary_beam_size[0] * primary_beam_size[1])
    } else {
        set primary_beam_area = pi /(4*ln(2)) * (primary_beam_size[0] * primary_beam_size[0])
    }
    if(dimen(synthesized_beam_size)>=2) {
        set synthesized_beam_area = pi /(4*ln(2)) * (synthesized_beam_size[0] * synthesized_beam_size[1])
    } else {
        set synthesized_beam_area = pi /(4*ln(2)) * (synthesized_beam_size[0] * synthesized_beam_size[0])
    }
    
    # compute number of independent beams
    set resolution_units = (primary_beam_area)/(synthesized_beam_area)
    set repetition_times = 84 #<TODO>#
    set gaussian_N_sigma = {0.5 1.0 1.5 2.0 2.5 3.0 \
                            3.5 4.0 4.5 5.0 5.5 6.0 \
                            6.5 7.0}
    set gaussian_P_inside = {0.382924922548026 0.682689492137086 0.866385597462284 0.954499736103642 0.987580669348448 0.997300203936740 \
                             0.999534741841929 0.999936657516334 0.999993204653751 0.999999426696856 0.999999962020875 0.999999998026825 \
                             0.999999999919680 0.999999999997440}
    #-- https://en.wikipedia.org/wiki/68%E2%80%9395%E2%80%9399.7_rule
    set N_2p0sigma = 2.0
    interp2 gaussian_N_sigma gaussian_P_inside N_2p0sigma P_2p0sigma
    set P_2p0sigma = (1.0-P_2p0sigma)/2.0 * resolution_units * repetition_times # positive peaks
    # 
    set N_2p5sigma = 2.5
    interp2 gaussian_N_sigma gaussian_P_inside N_2p5sigma P_2p5sigma
    set P_2p5sigma = (1.0-P_2p5sigma)/2.0 * resolution_units * repetition_times # positive peaks
    # 
    set N_3p0sigma = 3.0
    interp2 gaussian_N_sigma gaussian_P_inside N_3p0sigma P_3p0sigma
    set P_3p0sigma = (1.0-P_3p0sigma)/2.0 * resolution_units * repetition_times # positive peaks
    # 
    set N_3p5sigma = 3.5
    interp2 gaussian_N_sigma gaussian_P_inside N_3p5sigma P_3p5sigma
    set P_3p5sigma = (1.0-P_3p5sigma)/2.0 * resolution_units * repetition_times # positive peaks
    # 
    set N_5p0sigma = 5.0
    interp2 gaussian_N_sigma gaussian_P_inside N_5p0sigma P_5p0sigma
    set P_5p0sigma = (1.0-P_5p0sigma)/2.0 * resolution_units * repetition_times # positive peaks
    # 
    set P_20_35 = P_2p0sigma - P_3p5sigma
    set P_35_50 = P_3p5sigma - P_5p0sigma
    set P_5 = P_5p0sigma
    echo "resolution_units = "$(resolution_units)
    echo "repetition_times = "$(repetition_times)
    
    # match id
    declare x_sim 0.f
    declare x_fit 0.f
    declare x_err 0.f
    declare x_snr 0.f
    declare x_pbc 0.f
    declare x_rms 0.f
    declare x_res 0.f
    declare x_sim_id 0.f
    declare x_sim_z 0.f
    declare x_sim_ra 0.f
    declare x_sim_dec 0.f
    declare x_sim_lgMstar 0.f
    declare x_sim_lgSFR 0.f
    set fit_index = 0,dimen(fit_id)-1
    do i=0,dimen(sim_id)-1 {
        set x_match = (fit_id==sim_id[$i])
        if(sum(x_match)>0) {
            set x_index = fit_index if(x_match)
            # 
            set x_sim_1 = (x_index*0.0+sim_flux[$i]) # allow multiple fit_flux matched to each sim_flux
            set x_fit_1 = (f_total[x_index])
            set x_err_1 = (df_total[x_index]/f_total[x_index])
            set x_snr_1 = (snr_total[x_index])
            set x_pbc_1 = (pb_corr[x_index])
            set x_rms_1 = (rms[x_index])
            set x_res_1 = (fres[x_index])
            set x_sim_id_1 = (x_index*0.0+sim_id[$i]) # allow multiple fit_flux matched to each sim_flux
            set x_sim_ra_1 = (x_index*0.0+sim_ra[$i]) # allow multiple fit_flux matched to each sim_flux
            set x_sim_dec_1 = (x_index*0.0+sim_dec[$i]) # allow multiple fit_flux matched to each sim_flux
            set x_sim_z_1 = (x_index*0.0+sim_z[$i]) # allow multiple fit_flux matched to each sim_flux
            set x_sim_lgMstar_1 = (x_index*0.0+sim_lgMstar[$i]) # allow multiple fit_flux matched to each sim_flux
            set x_sim_lgSFR_1 = (x_index*0.0+sim_lgSFR[$i]) # allow multiple fit_flux matched to each sim_flux
            # 
            set x_sim = x_sim concat x_sim_1
            set x_fit = x_fit concat x_fit_1
            set x_err = x_err concat x_err_1
            set x_snr = x_snr concat x_snr_1
            set x_pbc = x_pbc concat x_pbc_1
            set x_rms = x_rms concat x_rms_1
            set x_res = x_res concat x_res_1
            set x_sim_id = x_sim_id concat (x_sim_id_1)
            set x_sim_ra = x_sim_ra concat (x_sim_ra_1)
            set x_sim_dec = x_sim_dec concat (x_sim_dec_1)
            set x_sim_z = x_sim_z concat (x_sim_z_1)
            set x_sim_lgMstar = x_sim_lgMstar concat (x_sim_lgMstar_1)
            set x_sim_lgSFR = x_sim_lgSFR concat (x_sim_lgSFR_1)
        }
    }
    set ra = x_sim_ra
    set dec = x_sim_dec
    set Xf = x_sim
    set f = x_fit
    set df = x_err * x_fit
    set snr = x_snr
    set pbc = x_pbc
    set rms = x_rms
    set fres = x_res
    set id = x_sim_id
    set z = x_sim_z
    set lgMstar = x_sim_lgMstar
    set lgSFR = x_sim_lgSFR
    set noise = rms
    # 
    # 
    # 
    # 
    # Plot flux-flux comparison
    macro read a_dzliu_code_plot_flux_comparison.sm
    plot_flux_comparison
    # 
    # 
    # 
    # 
    # 
    # Plot z-lsMstar-SNR
    macro read a_dzliu_code_plot_z_lgMstar_SNR.sm
    plot_z_lgMstar_SNR
    
    # 
    # 
    # 
    # 
    # 
    # Plot z-lgSFR-SNR
    macro read a_dzliu_code_plot_z_SFR_SNR.sm
    plot_z_SFR_SNR
    # 
    # 
    # 
    # 
    # 
    # Print datatable
    set id = float(id)
    print "simu_data_input.txt" '%20.0f %15.8f %15.8f %15g %15g %15g %15g %15g\n' {id ra dec Xf f df noise fres}
    # 
    # 
    # 
    # 
    # 
    # Analyze statistics
    #macro read run_simu_stats_v11.sm
    #analyze_statistics
    #--> output fALMA dfALMA





