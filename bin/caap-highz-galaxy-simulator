#!/bin/bash
# 

if [[ $(type caap_highz_galaxy_simulator_v1.py 2>/dev/null | wc -l) -eq 0 ]]; then
    #ls $(dirname "${BASH_SOURCE[0]}")/../SETUP.bash
    source $(dirname "${BASH_SOURCE[0]}")/../SETUP.bash
fi

if [[ $# -eq 0 ]]; then
    echo ""
    echo "Usage: "
    echo "  caap-highz-galaxy-simulator "
    echo "  caap-highz-galaxy-simulator -numb 1000 -pos 1 1000 1 1000 -flux 1.0 18.0 real -size 0.0 1.0 powerlaw -out simulated_galaxies.txt"
    echo "             [default values] -numb 1000"
    echo "                              -pos 0.0 1.0 0.0 1.0"
    echo "                              -flux 0.0 1.0"
    echo "                              -size real"
    echo "                              -out simulated_galaxies.txt"
    echo "  "
    echo "Aim: "
    echo "  This code aims at simulating a series of high-z galaxies that follow the real observed intrinsic flux and size distributions. "
    echo "  The output will be a text file containing position, flux and size."
    echo "  Then the user can use the text file as an input to galfit to simulate the blurry observation-like image."
    echo "  "
    echo "Output: "
    echo "  simulated_galaxies.txt"
    echo ""
    exit
fi

# Prepare variables
CAAP_INP_NUMB=1000
CAAP_INP_POSITION=(0.0 1.0 0.0 1.0)
CAAP_INP_FLUX=(0.0 1.0)
CAAP_INP_SIZE=(0.0 0.0)
CAAP_INP_OUTPUT=""

# Read input arguments
CAAP_ARG_GOOD=1
CAAP_ARG_TEXT=""
CAAP_ARG_TYPE="none"
while [[ $# -gt 0 ]]; do
    #echo $1
    CAAP_ARG_STR=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    #echo "$CAAP_ARG_STR"
    case "$CAAP_ARG_STR" in
              "-numb") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="none"; CAAP_INP_NUMB="$1";;
            "-number") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="none"; CAAP_INP_NUMB="$1";;
                 "-n") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="none"; CAAP_INP_NUMB="$1";;
               "-out") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="none"; CAAP_INP_OUTPUT="$1";;
            "-output") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="none"; CAAP_INP_OUTPUT="$1";;
                 "-o") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="none"; CAAP_INP_OUTPUT="$1";;
               "-pos") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="position";;
          "-position") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="position";;
                 "-p") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="position";;
              "-flux") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="flux";;
                 "-f") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="flux";;
              "-size") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="size";;
                 "-s") CAAP_ARG_TEXT="$1"; if [[ "$#" -lt 2 ]]; then CAAP_ARG_GOOD=0; break; fi; shift; CAAP_ARG_TYPE="size";;
    esac
    # 
    if [[ "$CAAP_ARG_TYPE" == "position" ]];  then 
        if [[ $# -lt 2 ]]; then break; fi # position must be in pair
        CAAP_INP_POSITION+=("$1"); shift; CAAP_INP_POSITION+=("$1")
    fi
    if [[ "$CAAP_ARG_TYPE" == "flux" ]];  then 
        if [[ $# -lt 2 ]]; then break; fi # flux must be in pair
        CAAP_INP_FLUX+=("$1"); shift; CAAP_INP_FLUX+=("$1")
    fi
    if [[ "$CAAP_ARG_TYPE" == "size" ]];  then 
        if [[ $# -lt 2 ]]; then break; fi # size must be in pair
        CAAP_INP_SIZE+=("$1"); shift; CAAP_INP_SIZE+=("$1")
    fi
    # 
    shift
done

# call main python code
# -- input arguments are: 
#    -- CAAP_SIM_POSITION
CAAP_SIM_POSITION="[${CAAP_INP_POSITION[0]}"
for (( i=1; i<${#CAAP_INP_POSITION[@]}; i++ )); do CAAP_SIM_POSITION="$CAAP_SIM_POSITION,${CAAP_INP_POSITION[i]}"; done
CAAP_SIM_POSITION="$CAAP_SIM_POSITION]"
#    -- CAAP_SIM_FLUX
CAAP_SIM_FLUX="[${CAAP_INP_FLUX[0]}"
for (( i=1; i<${#CAAP_INP_FLUX[@]}; i++ )); do CAAP_SIM_FLUX="$CAAP_SIM_FLUX,${CAAP_INP_FLUX[i]}"; done
CAAP_SIM_FLUX="$CAAP_SIM_FLUX]"
#    -- CAAP_SIM_SIZE
CAAP_SIM_SIZE="[${CAAP_INP_SIZE[0]}"
for (( i=1; i<${#CAAP_INP_SIZE[@]}; i++ )); do CAAP_SIM_SIZE="$CAAP_SIM_SIZE,${CAAP_INP_SIZE[i]}"; done
CAAP_SIM_SIZE="$CAAP_SIM_SIZE]"
# -- call caap_highz_galaxy_simulator_v1.py
echo caap_highz_galaxy_simulator_v1.py "${CAAP_SIM_POSITION[@]}" "${CAAP_SIM_FLUX[@]}" "${CAAP_SIM_SIZE[@]}"
caap_highz_galaxy_simulator_v1.py ${CAAP_SIM_POSITION[@]} "${CAAP_SIM_FLUX[@]}" "${CAAP_SIM_SIZE[@]}"


